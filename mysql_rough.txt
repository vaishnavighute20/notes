SELECT DEPTNO,SUM(SAL) FROM EMP
GROUP BY DEPTNO
ORDER BY SUM(SAL);


SELECT DEPTNO,SUM(SAL) FROM EMP
GROUP BY DEPTNO
ORDER BY 2;


SELECT DEPTNO,SUM(SAL) FROM EMP
WHERE SAL>7000
GROUP BY DEPTNO
HAVING SUM(SAL)>10000
ORDER BY 2;

SELECT DEPTNO ,COUNT(*),MIN(SAL),MAX(SAL),SUM(SAL) FROM EMP
GROUP BY DEPTNO
HAVING COUNT(*)>3
ORDER BY 4;


JOINS :-

SELECT DNAME ,ENAME FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO;

SELECT DNAME ,ENAME FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY DNAME;


SELECT DNAME ,ENAME FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY 1;


SELECT DNAME ,ENAME ,LOC,JOB, SAL FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY 1;


// TWO TIMES DEPTNO 
SELECT * FROM EMP,DEPT 
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY 1;


//AMBIGUITY ERROR
SELECT DEPTNO,DNAME,LOC,ENAME,JOB,SAL FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY 1
;

// SOLUTION    TABLENAME.COLUMNNAME
SELECT EMP.DEPTNO,DNAME,LOC,ENAME,JOB,SAL FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY 1
;

SELECT EMP.DEPTNO,DNAME,LOC,ENAME,JOB,SAL FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY SAL DESC 
LIMIT 2
;
 

// RECOMMONDED  MORE READABLE WHEN MORE COLUMN AND TABLE ARE PRESENT

SELECT DEPT.DEPTNO,EMP.ENAME,DEPT.DNAME,DEPT.LOC,EMP.JOB,EMP.SAL FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY 1;

SELECT UPPER(DNAME),SUM(SAL) FROM EMP,DEPT
WHERE DEPT.DEPTNO= EMP.DEPTNO
GROUP BY UPPER(DNAME)
ORDER BY SUM(SAL) DESC
LIMIT 2;

// SAME OUTPUT AS ABOVE
SELECT UPPER(DNAME),SUM(SAL) FROM EMP,DEPT
WHERE DEPT.DEPTNO= EMP.DEPTNO
GROUP BY UPPER(DNAME)
HAVING SUM(SAL)>10000
ORDER BY 2 DESC
;



// TYPES OF JOINS

EQUI JOIN

SELECT ENAME, DNAME FROM EMP,DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO;

NON-EQUI JOIN

SELECT ENAME, DNAME FROM EMP,DEPT
WHERE DEPT.DEPTNO!=EMP.DEPTNO;


//RIGHT OUTER JOIN
SELECT DNAME,ENAME FROM EMP
RIGHT OUTER JOIN DEPT
ON (DEPT.DEPTNO=EMP.DEPTNO) ;


//LEFT OUTER JOIN
SELECT DNAME,ENAME FROM EMP
LEFT OUTER JOIN DEPT
ON (DEPT.DEPTNO=EMP.DEPTNO) ;


// FULL OUTER JOIN  ..IE COMBINATION OF LEFT + RIGHT JOIN

SELECT DNAME , ENAME FROM EMP LEFT OUTER JOIN DEPT 
 ON (DEPT.DEPTNO = EMP.DEPTNO)
UNION
SELECT DNAME , ENAME FROM EMP RIGHT OUTER JOIN DEPT 
 ON (DEPT.DEPTNO = EMP.DEPTNO);


// CARTESIAN OR CROSS JOIN   JOIN WITHOUT WHERE CLAUSE
SELECT DNAME,ENAME FROM EMP,DEPT;


//SELF JOIN

SELECT A.ENAME,B.ENAME FROM EMP A,EMP B
WHERE A.MGR=B.EMPNO;



// NESTED QUERY /SUB QUERY / SELECT WITHIN SELECT

SELECT ENAME FROM EMP
WHERE SAL=
(SELECT MIN(SAL) FROM EMP);


// 2nd largest sal
SELECT ENAME ,MAX(SAL) FROM EMP
WHERE SAL<(SELECT MAX(SAL) FROM EMP)
;


SELECT ENAME,SAL FROM EMP
HAVING SAL<MAX(SAL);


SELECT * FROM EMP WHERE DEPTNO=
(SELECT DEPTNO FROM EMP WHERE ENAME="KING" );

SELECT * FROM EMP WHERE DEPTNO=
(SELECT DEPTNO FROM EMP WHERE ENAME='ALLEN');



//JOB AS RESHAM
SELECT * FROM EMP WHERE JOB=
(SELECT JOB FROM EMP WHERE ENAME='RESHAM');


//SAL=MANAGERS SAL
SELECT SAL,ENAME FROM EMP WHERE SAL=ANY
(SELECT SAL FROM EMP WHERE JOB='MANAGER');


SELECT * FROM EMP WHERE SAL IN
(SELECT SAL FROM EMP WHERE JOB='MANAGER');

SELECT SAL,ENAME FROM EMP WHERE SAL IN
(SELECT SAL FROM EMP WHERE JOB='MANAGER');


SELECT * FROM EMP WHERE SAL>=(
SELECT MIN(SAL) FROM EMP WHERE JOB='MANAGER');

// EMP WHO ARE GETTING SAL GREATER THAN MANAGER
SELECT * FROM EMP WHERE SAL>ALL
(SELECT MAX(SAL) FROM EMP WHERE JOB='MANAGER');



// MANAGER GETTING HIGH SAL THAN OTHER MANAGER
SELECT * FROM EMP 
WHERE JOB = 'MANAGER' 
  AND SAL = (SELECT MAX(SAL) FROM EMP WHERE JOB = 'MANAGER');


SELECT DEPTNO,SUM(SAL) FROM EMP
GROUP BY DEPTNO;


// CO-RELATED SUB-QUERY


SELECT DNAME FROM DEPT 
WHERE DEPTNO=ANY(SELECT DISTINCT  DEPTNO FROM  EMP);


SELECT DNAME FROM DEPT 
WHERE DEPTNO NOT IN (SELECT DISTINCT  DEPTNO FROM  EMP);

SELECT DNAME FROM DEPT 
WHERE DEPTNO  IN (SELECT DISTINCT  DEPTNO FROM  EMP);


SELECT DNAME ,DEPTNO FROM DEPT WHERE EXISTS
(SELECT DEPTNO FROM EMP 
WHERE DEPT.DEPTNO=EMP.DEPTNO);

SELECT DNAME ,DEPTNO FROM DEPT WHERE NOT EXISTS
(SELECT DEPTNO FROM EMP 
WHERE DEPT.DEPTNO=EMP.DEPTNO);

 
// UNION

SELECT SID,FULL_NAME FROM STUDENT
     UNION
 SELECT ID,NAME FROM STUD;


SELECT SID,FULL_NAME FROM STUDENT
     UNION ALL
 SELECT ID,NAME FROM STUD;



 // COPY A TABLE 
CREATE TABLE EMP_COPY 
AS SELECT * FROM EMP;


// TO COPY CERTAIN COLUMN ONLY
CREATE TABLE EMP_COPED
AS SELECT EMPNO,DEPTNO,ENAME FROM EMP;

 // COPY ONLY STRUCTURE
CREATE TABLE EPM_ST
AS SELECT * FROM EMP WHERE 1=2;

 DROP TABLE 'EPM_ST';


 select * from emp_10 ;

CHANGE DATATYPE OF COLUMN


ALTER TABLE EMP_10 ADD XEMP1 CHAR(7);

UPDATE EMP_10 SET XEMP1=ENAME,ENAME=NULL;



//INDEXEX 


SELECT * FROM EMP WHERE EMPNO=0;

SELECT * FROM EMP WHERE EMPNO IS NULL;

create index i_emp_empno on emp(empno);

SHOW INDEXES FROM EMP;

DROP INDEX I_EMP_EMPNO ON EMP;

CREATE TABLE TEMPP(FIR INT ,SEC CHAR (15));


VIEW:-

CREATE VIEW V1 AS 
SELECT EMPNO,ENAME FROM EMP;
DESC V1;
SELECT * FROM V1;
DROP VIEW V1;

// IF EXISTS REPLACE VIEW ANND IF NOT EXISTS CREATE IT
CREATE OR REPLACE VIEW V1 AS
SELECT * FROM EMP;

CREATE OR REPLACE VIEW V1 AS
SELECT ENAME,MGR,DEPTNO FROM EMP;

SHOW TABLES;// SHOW ALL TABLES
SHOW FULL TABLES;// TO SEE TABLE IS VIEW OR TBALE
SHOW CREATE VIEW V1;// TO SEE STATEMENT


PL-SQL  // PROGRAMMING LANGUAGE 


//TO STORE THE OUTPUT OF PL PROGRMAS CREATE ONE OUTPUT TABLE PER APPLICATION 

CREATE TABLE TEMPP (FIR INT,SEC CHAR(15));


// TO SEE ALREADY PRESENT PROCEDURES
SHOW PROCEDURE STATUS WHERE Db = 'your_database_name';
SHOW PROCEDURE STATUS WHERE Db = 'IACSD0324';
// TO DROP
DROP PROCEDURE IF EXISTS my_procedure;


DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	INSERT INTO TEMPP VALUES(1,'HELLO');
END;//
DELIMITER //
 
CALL ABC();
SELECT * FROM TEMPP;// TO SEE OUTPUT



DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
DECLARE X INT ;
SET X=10;
INSERT INTO TEMPP VALUES (X,'HI');
INSERT INTO TEMPP VALUES (X,'HI');
END; //
DELIMITER ;
 
 

DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X INT DEFAULT 20;
	INSERT INTO TEMPP VALUES (X,'AA');
END; //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X CHAR(15) DEFAULT 'CDAC';
	INSERT INTO TEMPP VALUES (11,X);
END; //
DELIMITER ;


 
DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
     DECLARE X CHAR(15) DEFAULT 'VAISHNU';
     DECLARE Y FLOAT DEFAULT 333.33;
     DECLARE Z FLOAT DEFAULT 0.33;
     DECLARE HRA FLOAT ;
     SET HRA = Y*Z;
     INSERT INTO TEMPP VALUES (HRA,'HRA');
     INSERT INTO TEMPP VALUES (Y,X);
END; //
DELIMITER ;



DELIMITER //
CREATE PROCEDURE ABC(X CHAR (15),Y FLOAT,Z FLOAT)
BEGIN	
	DECLARE HRA FLOAT ;
	SET HRA=Y*Z;
        INSERT INTO TEMPP VALUES (HRA,'HRA');
        INSERT INTO TEMPP VALUES (Y,X); 
END ; //
DELIMITER ;

CALL ABC('KING',333,0.4);
CALL ABC('RAM',33,0.3);



DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X INT;
	SELECT SAL INTO X FROM EMP 
	WHERE ENAME='KING' ;
	INSERT INTO TEMPP VALUES (X,'KING');
END ; //
DELIMITER ;


// PASS BY PARAMETER

DELIMITER //
CREATE PROCEDURE ABC(Y CHAR(15))
BEGIN 
DECLARE X INT ;
SELECT SAL INTO X FROM EMP 
WHERE ENAME=Y;
INSERT INTO TEMPP VALUES (X,Y);
END;
// DELIMITER;

CALL ABC('RESHAM')



DELIMITER //
CREATE PROCEDURE ABC()
BEGIN 
DECLARE X INT ;
SELECT SAL INTO X FROM EMP 
WHERE ENAME='KING';
INSERT INTO TEMPP VALUES (X,'KING');
END;
// DELIMITER;




DELIMITER //
CREATE PROCEDURE PQR()
BEGIN 
DECLARE X INT ;
DECLARE Y VARCHAR(15);
SELECT SAL ,JOB INTO X ,Y FROM EMP 
WHERE ENAME='KING';
INSERT INTO TEMPP VALUES (X,Y);
END;
// DELIMITER;



// DECISION MAKING USING IF STATEMENT


DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X INT;
	SELECT SAL INTO X FROM EMP 
	WHERE ENAME='KING';
	IF
	 X>4000 THEN 					
	INSERT INTO TEMPP VALUES(X,'HIGH SAL');
	ELSE	
	INSERT INTO TEMPP VALUES(X,'LOW SAL');
	END IF;
END ; //
DELIMITER ;	
	



DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
DECLARE X INT ;
SELECT SAL INTO X FROM EMP WHERE ENAME='RESHAM';
IF X>4000 THEN INSERT INTO TEMPP VALUES (X,'HIGH SAL');
END IF;
END;
// DELIMITER ;


DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
DECLARE X INT ;
SELECT SAL INTO X FROM EMP WHERE ENAME='RESHAM';
IF X>4000 THEN INSERT INTO TEMPP VALUES (X,'HIGH SAL');
ELSE
IF X< 4000 THEN INSERT INTO TEMPP VALUES(X,'LOW SAL');
ELSE 
   INSERT INTO TEMPP VALUES(X,'MEDIUM SAL');
      END IF;
END IF;
END;
// DELIMITER ;



// CONSTRUCT 
// IF----ELSEIF----ELSE----END IF;

DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
DECLARE X INT ;
SELECT SAL INTO X FROM EMP WHERE ENAME='WARD';
       IF X>4000 THEN
             INSERT INTO TEMPP VALUES (X,'HIGH SAL');
       elseif X < 4000 THEN
            INSERT INTO TEMPP VALUES(X,'LOW SAL');
       ELSE 
	    INSERT INTO TEMPP VALUES(X,'MEDIUM SAL');
       END IF;
END;
// DELIMITER ;
 

DELIMITER //
CREATE PROCEDURE ABC()
BEGIN 
	DECLARE X BOOLEAN DEFAULT TRUE;
	IF X THEN
	INSERT INTO TEMPP VALUES(1,'MUMBAI');
	END IF;
END ; //
DELIMITER //



DELIMITER //
CREATE PROCEDURE ABC()
BEGIN 
	DECLARE X BOOLEAN DEFAULT FALSE;
	IF NOT X THEN
	INSERT INTO TEMPP VALUES(1,'DELHI');
	END IF;
END ; //
DELIMITER //


//CALLING PROCEDURE INSIDE ANOTHER PROCEDURE

DELIMITER //
CREATE PROCEDURE PQR()
BEGIN 
	 CALL ABC();
END ; //
DELIMITER //

// PL -LOOPS
//WHILE LOOPS // CHECK CONDITION BEFORE ENTERING LOOP


DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X INT DEFAULT 1;
	WHILE X<10 DO
	INSERT INTO TEMPP VALUES(X,'IN WHILE LOOP');
	SET X=X+1;
	END WHILE;
END; //
DELIMITER ;




DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X INT DEFAULT 1;
	DECLARE Y INT DEFAULT 1;
	WHILE X<10 DO
		WHILE Y<10 DO 
			INSERT INTO TEMPP VALUES(Y,'IN Y WHILE LOOP');
		SET Y=Y+1;
		END WHILE;
	INSERT INTO TEMPP VALUES(X,'IN X WHILE LOOP');
	SET X=X+1;
	END WHILE;
END; //
DELIMITER ;




DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X INT DEFAULT 1;
	DECLARE Y INT DEFAULT 1;
	WHILE X<10 DO
		WHILE Y<X DO 
			INSERT INTO TEMPP VALUES(Y,'IN Y WHILE LOOP');
		SET Y=Y+1;
		END WHILE;
	INSERT INTO TEMPP VALUES(X,'IN X WHILE LOOP');
	SET X=X+1;
	END WHILE;
END; //
DELIMITER ;



//REPEAT LOOP
// SIMILAR TO DO-WHILE LOOPS
//IT WILL EXECUTE AT LEAST ONCE


DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X INT DEFAULT 1;
	REPEAT
	insert into tempp values(X,'in LOOP');
	SET X=X+1;
	UNTIL X>5
	END REPEAT;
END; //
DELIMITER ;




// LOOP, LEAVE , ITERATE STATEMENT  

DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE X INT DEFAULT 1;
	PQR_LOOP:LOOP
		IF X>10 THEN
			LEAVE PQR_LOOP;
		END IF;
		SET X=X+1;
		IF MOD(X,2)!=0 THEN
		ITERATE PQR_LOOP;
		ELSE
		insert into tempp values(X,'LOOP');
                END IF ;
	END LOOP;
END ; //
DELIMITER ;



// GLOBAL VARIABLES (SESSION VARIABLES)
 
SET @ X=10;// DECLARATION
SET @X=@ x+1 // TO CHANGE VALUE


//CURSORS 
DELIMITER //
CREATE PROCEDURE ABC()
BEGIN
	DECLARE A INT ;
	DECLARE B VARCHAR(15);
	DECLARE C INT ;
	DECLARE D INT ;
	DECLARE X INT DEFAULT 0;
	DECLARE C1 CURSOR FOR SELECT * FROM EMP ;
	OPEN C1;
	WHILE X<5 DO
	FETCH C1 INTO A,B,C,D;
	INSERT INTO TEMPP VALUES (A,B);
	SET X=X+1;
	END WHILE ;
	CLOSE C1;
END ;//
DELIMITER ;

	

// PARAMETERS    
//IN := READ ONLY
//OUT:= WRITE ONLY
//INOUT:=READ AND WRITE 

DELIMITER //
CREATE PROCEDURE ABC (IN Y INT)
BEGIN
	INSERT INTO TEMPP VALUES(Y,'INSIDE ABC');
END; //
DELIMITER ;

SET @ X=10;
CALL ABC(@X);




DELIMITER // 
CREATE PROCEDURE ABC (OUT Y INT)
BEGIN
	SET Y=100;
	INSERT INTO TEMPP VALUES(Y,'INSIDE ABC');
END; //
DELIMITER ;
SET @ X=10;
CALL ABC(@X);



 DELIMITER // 
CREATE PROCEDURE ABC (INOUT Y INT)
BEGIN
	SET Y=100;
	INSERT INTO TEMPP VALUES(Y,'INSIDE ABC');
END; //
DELIMITER ;



// STORED FUNCTIONS  IN PARAMETERS ONLY
// RETURNS A VALUE DIRECTLY AND COMPLUSORILY
// LIKE PROCEDURE WE CANT CALL FUNCTION BEACAUSE IT RETURNS VALUE SO WE HAVE TO EQUATE WITH VARIABLE OR IT SHOULD BE PART OF SOME EXPRESSION

// TO SEE FUNCTIONS 
SHOW FUNCTION STATUS;
// TO SEE FUNCTION IN DB
SHOW FUNCTION STATUS WHERE DB='IACSD0324';


DELIMITER //
CREATE FUNCTION ABC ()
RETURNS INT
DETERMINISTIC
BEGIN
	RETURN 10;
END; //
DELIMITER ;

SELECT ABC() AS Result; 
DROP FUNCTION  ABC;



DELIMITER //
CREATE PROCEDURE PQR()
BEGIN 
	DECLARE X INT;
	SET X= ABC();
	INSERT INTO TEMPP VALUES(X,'AFTER ABC')
END; //
DELIMITER ;

----------------------------------------------------

DELIMITER //
CREATE FUNCTION ABC(Y INT)
RETURNS INT
DETERMINISTIC
BEGIN
	RETURN Y*Y;
END ; //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE PQR()
BEGIN
	DECLARE X INT;
	SET X=ABC(10);
	INSERT INTO TEMPP VALUES(X,'AFTER ABC');
END; //
DELIMITER ;
//to drop function
 DROP FUNCTION  ABC;
------------------------------------------------------

 DELIMITER //
CREATE FUNCTION ABC(Y INT)
RETURNS BOOLEAN
DETERMINISTIC
IF Y>5000 THEN 
	RETURN TRUE;
ELSE
	RETURN FALSE;
END IF;
END ;//
DELIMITER ;



 DELIMITER //
CREATE PROCEDURE PQR()
BEGIN 
	DECLARE X INT;
	SELECT SAL INTO X FROM EMP WHERE ENAME='RESHAM';
	IF ABC (X) THEN 
	INSERT INTO TEMPP VALUES (X,'1>5000');
	ELSE
        INSERT INTO TEMPP VALUES (X,'1<=5000');
	END IF;
END ; //
DELIMITER ;



-----------------------------------------------------
// TRIGGERS

delimiter //
create trigger abc 
before insert on emp for each row 
begin	
insert into tempp values(1,'inserted');
end; //
delimiter ;



delimiter //
create trigger abc 
before insert on emp for each row 
begin	
insert into tempp values(NEW.SAL,NEW.EMP);
end; //
delimiter ;







CASE EXPRESSION:-
 
select deptno, 
case 
when deptno=10 then 'Ten'
when deptno=20 then 'Twenty'
end "deptno"
from emp;

select deptno,ename,sal* 12 annual,
case 
when deptno=10 then sal*12*0.4
when deptno=20 then sal*12*0.3
when deptno=30 then sal*12*0.2
else sal * 12* 0.1
end  'HRA' from emp;


select ename, sal,
case
when sign (sal-3000)=1 then 'high sal'
when sign (sal-3000)=-1 then 'low sal'
else 'middle income'
end "Remarks"
from emp
order by 2;





